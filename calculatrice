import tkinter as tk

class Calculator:
    def __init__(self, master):
        self.master = master
        master.title("Calculatrice")  # DÃ©finit le titre de la fenÃªtre

        self.current_input = ""  # Stocke l'entrÃ©e actuelle ou le rÃ©sultat de l'opÃ©ration
        self.result_var = tk.StringVar()  # Variable Tkinter pour l'affichage du rÃ©sultat

        # ThÃ¨mes de couleurs pour les modes clair et sombre
        self.light_theme = {"bg": "white", "fg": "black", "button_bg": "light gray", "display_bg": "white"}
        self.dark_theme = {"bg": "black", "fg": "white", "button_bg": "dark gray", "display_bg": "gray"}
        self.theme = self.light_theme  # ThÃ¨me actuel

        # CrÃ©ation d'un Ã©cran de calculatrice pour afficher les entrÃ©es et les rÃ©sultats
        self.display = tk.Entry(master, textvariable=self.result_var, bg=self.theme["display_bg"], fg=self.theme["fg"])
        self.display.grid(row=0, column=0, columnspan=4, sticky="nsew")

        # Configuration de la grille pour une distribution Ã©gale des boutons
        tk.Grid.rowconfigure(master, 0, weight=1)
        for i in range(1, 6):  # ChangÃ© Ã  6 pour inclure une ligne supplÃ©mentaire pour le bouton de thÃ¨me
            tk.Grid.rowconfigure(master, i, weight=1)
            tk.Grid.columnconfigure(master, i-1, weight=1)

        # Ajout des boutons de la calculatrice
        buttons = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('0', 4, 1),
            ('+', 1, 3), ('-', 2, 3), ('*', 3, 3), ('/', 4, 3),
            ('C', 4, 0), ('=', 4, 2),
        ]
        for (text, row, col) in buttons:
            self.add_button(text, row, col)

        # Bouton pour basculer entre les modes clair et sombre
        self.toggle_theme_button = tk.Button(master, text="Mode Sombre", command=self.toggle_theme)
        self.toggle_theme_button.grid(row=5, column=0, columnspan=4, sticky="nsew")
        self.update_theme()

    def add_button(self, text, row, col):
        button = tk.Button(self.master, text=text, bg=self.theme["button_bg"], fg=self.theme["fg"],
                           command=lambda: self.on_button_click(text))
        button.grid(row=row, column=col, sticky="nsew")

    def on_button_click(self, char):
        if char == 'C':
            self.current_input = ""
        elif char == '=':
            try:
                self.current_input = str(eval(self.current_input))
            except Exception as e:
                self.current_input = "Error"
        else:
            self.current_input += char
        self.result_var.set(self.current_input)

    def toggle_theme(self):
        # Bascule entre les thÃ¨mes clair et sombre
        if self.theme == self.light_theme:
            self.theme = self.dark_theme
            self.toggle_theme_button.config(text="Mode Clair")
        else:
            self.theme = self.light_theme
            self.toggle_theme_button.config(text="Mode Sombre")
        self.update_theme()

    def update_theme(self):
        # Met Ã  jour les couleurs des widgets selon le thÃ¨me actuel
        self.master.config(bg=self.theme["bg"])
        self.display.config(bg=self.theme["display_bg"], fg=self.theme["fg"])
        self.toggle_theme_button.config(bg=self.theme["button_bg"], fg=self.theme["fg"])
        for widget in self.master.winfo_children():
            if isinstance(widget, tk.Button):
                widget.config(bg=self.theme["button_bg"], fg=self.theme["fg"])

if __name__ == "__main__":
    root = tk.Tk()
    calculator = Calculator(root)
    root.mainloop()